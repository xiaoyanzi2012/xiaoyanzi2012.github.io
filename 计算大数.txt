package fizzbuzz;

import java.util.Scanner;

public class Demo17 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		while(sc.hasNext()){
			String a = sc.nextLine();
			String b = sc.nextLine();
			String [] str1 = a.toString().split("\\.");
			String [] str2 = b.toString().split("\\.");
			String result1 = addBigNum(str1[0],str2[0]);
			String result2 = addBigNum1(str1[1],str2[1]);
			char [] ch = result2.toCharArray();
			if(result2.length()>str1[1].length()||result2.length()>str2[1].length()){
				if((ch[0]=='1')&&(ch.length>str1[1].length())){
					char [] ch1 = result1.toCharArray();
					ch1[ch1.length-1] += 1;
					 StringBuffer sb = new StringBuffer();
					for(int i=0;i<ch1.length;i++){
						sb.append(ch1[i]);
					}
					String s2=result2.substring(1,result2.length());
					System.out.println(sb.toString()+"."+s2);
				}else{
				System.out.println(result1+"."+result2);
				}
			}
		}
	}
	 public static String addBigNum(String num1, String num2) {
		 
	        //1. String转为char数组 
	        //因为num1, num2 可能位数不一样，比如num1=123， num=1234, 翻转两个字符串后，个位十位相加比较方便
	        char[] num1Chars = new StringBuffer(num1).reverse().toString().toCharArray();
	        char[] num2Chars = new StringBuffer(num2).reverse().toString().toCharArray();

	        int num1Length = num1Chars.length;
	        int num2Length = num2Chars.length;
	        //2. 在长的数组长度上加一来存新数组
	        int maxLength = num1Length;
	        if (num2Length > num1Length)
	            maxLength = num2Length;
	        int[] result = new int[maxLength+1];

	        //3. 对位相加
	        for (int i = 0; i < result.length; i++) {
	            // 如果当前的i超过了某个数组的长度，就用0代替高位了，和另一个字符数组中的数字相加
	            int aint = i < num1Length ? (num1Chars[i] - '0') : 0;
	            int bint = i < num2Length ? (num2Chars[i] - '0') : 0;
	            //result[i]可能已经有值了，是前面一位运算(i-1)进位过来的，所以不能直接赋值，要 +=
	            result[i] += aint + bint;

	            //如果大于10的就向前一位进位，本身进行除10取余
	            if (result[i] >= 10) {
	                result[i + 1] += result[i] / 10;
	                result[i] %= 10;
	            }
	        }
	        //4. 存储最后的结果
	        StringBuffer sb = new StringBuffer();
	        //判断最高位是0还是1, 0无需保存
	        if (result[result.length-1] == 1) 
	            sb.append(1);
	        for (int i = result.length-2; i >= 0; i--) {
	            sb.append(result[i]);
	        }
	        return sb.toString();
	    }
	 
	 //小数点后面的相加
	 public static String addBigNum1(String num1, String num2) {
	  
	       
	        char[] num1Chars = new StringBuffer(num1).toString().toCharArray();
	        char[] num2Chars = new StringBuffer(num2).toString().toCharArray();

	        int num1Length = num1Chars.length;
	        int num2Length = num2Chars.length;
	   
	        int maxLength = num1Length;
	        if (num2Length > num1Length)
	            maxLength = num2Length;
	        int[] result = new int[maxLength+1];

	        for (int i = 0; i < result.length-1; i++) {
	            int aint = i < num1Length ? (num1Chars[i] - '0') : 0;
	            int bint = i < num2Length ? (num2Chars[i] - '0') : 0;
	            result[i] += aint + bint;
	           
	        }
	        for(int i = result.length-1; i >0; i--){
		        if (result[i] >= 10) {
	                result[i - 1] += result[i] / 10;
	                result[i] %= 10;
	            }
		        }
	 
	        StringBuffer sb = new StringBuffer();
	        
	        for (int i = 0; i <result.length; i++) {
	            sb.append(result[i]);     
	        }
	        return sb.toString();
	    }
}
